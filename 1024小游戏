import random

# 游戏棋盘大小
BOARD_SIZE = 4

# 初始数字出现的概率（80%的概率出现2，20%的概率出现4）
INIT_PROBABILITY = [2] * 4 + [4]

def initialize_board():
    """初始化游戏棋盘"""
    board = [[0] * BOARD_SIZE for _ in range(BOARD_SIZE)]
    add_random_number(board)
    return board

def add_random_number(board):
    """在空白格子随机生成一个初始数字"""
    empty_cells = [(i, j) for i in range(BOARD_SIZE) for j in range(BOARD_SIZE) if board[i][j] == 0]
    if empty_cells:
        i, j = random.choice(empty_cells)
        board[i][j] = random.choice(INIT_PROBABILITY)

def print_board(board):
    """打印游戏棋盘"""
    for row in board:
        print(" ".join(str(cell) if cell != 0 else '.' for cell in row))

def move_and_merge(board, direction):
    """根据滑动方向移动和合并数字"""
    def merge(row):
        """合并一行中相同的数字"""
        new_row = [cell for cell in row if cell != 0]
        for i in range(len(new_row) - 1):
            if new_row[i] == new_row[i + 1]:
                new_row[i] *= 2
                new_row[i + 1] = 0
        new_row = [cell for cell in new_row if cell != 0]
        return new_row + [0] * (BOARD_SIZE - len(new_row))

    def move_board_left():
        """向左滑动游戏棋盘"""
        return [merge(row) for row in board]

    def move_board_right():
        """向右滑动游戏棋盘"""
        return [row[::-1] for row in [merge(row[::-1]) for row in board]]

    def move_board_up():
        """向上滑动游戏棋盘"""
        transposed_board = [list(col) for col in zip(*board)]
        return [list(col) for col in zip(*merge(transposed_board))]

    def move_board_down():
        """向下滑动游戏棋盘"""
        transposed_board = [list(col) for col in zip(*board)]
        return [list(col) for col in zip(*merge(transposed_board[::-1]))][::-1]

    moves = {
        'left': move_board_left,
        'right': move_board_right,
        'up': move_board_up,
        'down': move_board_down
    }

    if direction in moves:
        return moves[direction]()
    else:
        return board

def is_game_over(board):
    """检查游戏是否结束（无法进行合并或移动）"""
    for i in range(BOARD_SIZE):
        for j in range(BOARD_SIZE):
            if board[i][j] == 0:
                return False
            if j > 0 and board[i][j] == board[i][j - 1]:
                return False
            if i > 0 and board[i][j] == board[i - 1][j]:
                return False
    return True

def main():
    board = initialize_board()

    print("欢迎来到数字合并游戏！")
    print_board(board)

    while True:
        direction = input("请输入滑动方向（上：'up', 下：'down', 左：'left', 右：'right'，退出：'q'）: ")

        if direction == 'q':
            print("游戏结束。")
            break

        new_board = move_and_merge(board, direction)

        if new_board == board:
            print("无效的移动，请重新输入。")
            continue

        board = new_board
        add_random_number(board)
        print_board(board)

        if any(1024 in row for row in board):
            print("恭喜！您成功合并出了 1024！")
            break

        if is_game_over(board):
            print("游戏结束，没有更多的合并或移动。")
            break

if __name__ == "__main__":
    main()
